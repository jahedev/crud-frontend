[{"/Users/mojaho/Github/frontend-crud-template/src/index.js":"1","/Users/mojaho/Github/frontend-crud-template/src/reportWebVitals.js":"2","/Users/mojaho/Github/frontend-crud-template/src/redux/store.js":"3","/Users/mojaho/Github/frontend-crud-template/src/App.js":"4","/Users/mojaho/Github/frontend-crud-template/src/components/AllStudents.js":"5","/Users/mojaho/Github/frontend-crud-template/src/components/AllCampuses.js":"6","/Users/mojaho/Github/frontend-crud-template/src/components/Homepage.js":"7","/Users/mojaho/Github/frontend-crud-template/src/components/SingleStudent.js":"8","/Users/mojaho/Github/frontend-crud-template/src/components/CreateStudent.js":"9","/Users/mojaho/Github/frontend-crud-template/src/redux/reducers/index.js":"10","/Users/mojaho/Github/frontend-crud-template/src/components/Campus.js":"11","/Users/mojaho/Github/frontend-crud-template/src/components/Student.js":"12","/Users/mojaho/Github/frontend-crud-template/src/redux/reducers/actionTypes.js":"13","/Users/mojaho/Github/frontend-crud-template/src/components/DeleteStudent.js":"14","/Users/mojaho/Github/frontend-crud-template/src/components/CreateCampus.js":"15","/Users/mojaho/Github/frontend-crud-template/src/components/SingleCampus.js":"16","/Users/mojaho/Github/frontend-crud-template/src/components/DeleteCampus.js":"17","/Users/mojaho/Github/frontend-crud-template/src/components/Navbar.js":"18","/Users/mojaho/Github/frontend-crud-template/src/components/HalfHeaderBG.js":"19","/Users/mojaho/Github/frontend-crud-template/src/helper/validateEmail.js":"20","/Users/mojaho/Github/frontend-crud-template/src/helper/backend.js":"21"},{"size":593,"mtime":1611548821598,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1611328992500,"results":"24","hashOfConfig":"23"},{"size":268,"mtime":1611328992500,"results":"25","hashOfConfig":"23"},{"size":1283,"mtime":1611547908154,"results":"26","hashOfConfig":"23"},{"size":2291,"mtime":1611546113422,"results":"27","hashOfConfig":"23"},{"size":3331,"mtime":1611542724733,"results":"28","hashOfConfig":"23"},{"size":640,"mtime":1611542724740,"results":"29","hashOfConfig":"23"},{"size":7633,"mtime":1611548615307,"results":"30","hashOfConfig":"23"},{"size":4887,"mtime":1611547073424,"results":"31","hashOfConfig":"23"},{"size":6636,"mtime":1611548247776,"results":"32","hashOfConfig":"23"},{"size":868,"mtime":1611546113423,"results":"33","hashOfConfig":"23"},{"size":907,"mtime":1611546220162,"results":"34","hashOfConfig":"23"},{"size":495,"mtime":1611458674249,"results":"35","hashOfConfig":"23"},{"size":1165,"mtime":1611542724738,"results":"36","hashOfConfig":"23"},{"size":2769,"mtime":1611542724735,"results":"37","hashOfConfig":"23"},{"size":7110,"mtime":1611543385786,"results":"38","hashOfConfig":"23"},{"size":931,"mtime":1611542892851,"results":"39","hashOfConfig":"23"},{"size":573,"mtime":1611520805608,"results":"40","hashOfConfig":"23"},{"size":326,"mtime":1611542724739,"results":"41","hashOfConfig":"23"},{"size":275,"mtime":1611547026117,"results":"42","hashOfConfig":"23"},{"size":124,"mtime":1611549673516,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"h868va",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/Users/mojaho/Github/frontend-crud-template/src/index.js",[],["97","98"],"/Users/mojaho/Github/frontend-crud-template/src/reportWebVitals.js",[],"/Users/mojaho/Github/frontend-crud-template/src/redux/store.js",[],"/Users/mojaho/Github/frontend-crud-template/src/App.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/AllStudents.js",["99"],"import React, { Component } from \"react\"\n\nimport { Link } from \"react-router-dom\"\n\nimport { connect } from \"react-redux\"\nimport { getAllStudents } from \"../redux/reducers\"\n\nimport Student from \"./Student\"\nimport CreateStudent from \"./CreateStudent\"\nimport HalfHeaderBG from \"./HalfHeaderBG\"\n\nclass AllStudents extends Component {\n  state = {\n    addingStudent: false,\n  }\n\n  async componentDidMount() {\n    await this.fetchAllStudents()\n  }\n\n  async fetchAllStudents() {\n    await this.props.getAllStudents()\n    setTimeout(() => {\n      console.log(this.props.students)\n    }, 200)\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <HalfHeaderBG imgdiv=\"half-bg-students\" title=\"All Students\" />\n        <div>\n          <button\n            className=\"green-btn\"\n            onClick={() =>\n              this.setState({ addingStudent: !this.state.addingStudent })\n            }\n          >\n            Add Student\n          </button>\n        </div>\n        {this.state.addingStudent === true ? (\n          <div>\n            <CreateStudent showHeader={false} />\n            <div>\n              <button onClick={() => this.setState({ addingStudent: false })}>\n                Cancel Addition\n              </button>\n              <br />\n              <br />\n            </div>\n          </div>\n        ) : (\n          <br />\n        )}\n\n        {this.props.students !== undefined ? (\n          this.props.students.map((student, index) => (\n            <div className=\"student-container\" key={index}>\n              <Student\n                id={student.id}\n                first={student.first}\n                last={student.last}\n                email={student.email}\n                image={student.image}\n                gpa={student.gpa}\n                CampusId={student.CampusId}\n              />\n              <br />\n              <br />\n            </div>\n          ))\n        ) : (\n          <br />\n        )}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    students: state.students,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getAllStudents: () => dispatch(getAllStudents()),\n    // deleteStudent: () => dispatch(deleteStudent()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllStudents)\n","/Users/mojaho/Github/frontend-crud-template/src/components/AllCampuses.js",["100","101"],"import React, { Component } from \"react\"\n\nimport { Link } from \"react-router-dom\"\n\nimport { connect } from \"react-redux\"\nimport { getAllCampuses } from \"../redux/reducers\"\n\nimport Campus from \"./Campus\"\nimport CreateCampus from \"./CreateCampus\"\nimport HalfHeaderBG from \"./HalfHeaderBG\"\n\nclass AllCampuses extends Component {\n  state = {\n    addingCampus: false,\n  }\n\n  async componentDidMount() {\n    await this.fetchAllCampuses()\n  }\n\n  async fetchAllCampuses() {\n    await this.props.getAllCampuses()\n    setTimeout(() => {\n      console.log(this.props.campuses)\n    }, 200)\n  }\n\n  render() {\n    if (this.props.campuses.length === 0) {\n      return (\n        <div className=\"container\">\n          <div className=\"half-bg-campuses\"></div>\n          <div className=\"no-campuses\">\n            <div>\n              <p>There are no campuses! Try adding one</p>\n              <div>\n                <button\n                  onClick={() =>\n                    this.setState({ addingCampus: !this.state.addingCampus })\n                  }\n                  className=\"green-btn\"\n                >\n                  Add Campus\n                </button>\n              </div>\n              {this.state.addingCampus === true ? (\n                <div>\n                  <CreateCampus showHeader={false} />\n                  <div>\n                    <button\n                      onClick={() => this.setState({ addingCampus: false })}\n                      className=\"red-btn\"\n                    >\n                      Cancel Addition\n                    </button>\n                    <br />\n                    <br />\n                  </div>\n                </div>\n              ) : (\n                <br />\n              )}\n            </div>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <div className=\"container\">\n        <HalfHeaderBG imgdiv=\"half-bg-campuses\" title=\"All Campuses\" />\n\n        <div>\n          <button\n            className=\"green-btn\"\n            onClick={() =>\n              this.setState({ addingCampus: !this.state.addingCampus })\n            }\n            className=\"addCampusButton\"\n          >\n            Add Campus\n          </button>\n        </div>\n        {this.state.addingCampus === true ? (\n          <div>\n            <CreateCampus showHeader={false} />\n            <div>\n              <button onClick={() => this.setState({ addingCampus: false })}>\n                Cancel Addition\n              </button>\n              <br />\n              <br />\n            </div>\n          </div>\n        ) : (\n          <br />\n        )}\n\n        {this.props.campuses !== undefined ? (\n          this.props.campuses.map((campus, index) => (\n            <Campus\n              key={index}\n              id={campus.id}\n              campusname={campus.campusname}\n              image={campus.image}\n              address={campus.address}\n              description={campus.description}\n              Students={campus.Students}\n            />\n          ))\n        ) : (\n          <span />\n        )}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    campuses: state.campuses,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getAllCampuses: () => dispatch(getAllCampuses()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllCampuses)\n","/Users/mojaho/Github/frontend-crud-template/src/components/Homepage.js",["102","103"],"import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Navbar from './Navbar'\nimport '../css/homepage.css'\n\nclass Homepage extends Component {\n  render() {\n    return (\n      <div className='container'>\n        <div className='bg-whole'>\n          <div className='middle-align'>\n            <h1 className='homepage-header'>CRUD APPLICATION</h1>\n            <br />\n            <h3 className='homepage-subtitle'>\n              Team: Karim Nekzad, Marin Kocollari, M. Jahed Hossain, Hassan\n              Akbar\n            </h3>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Homepage\n","/Users/mojaho/Github/frontend-crud-template/src/components/SingleStudent.js",["104"],"import React, { Component } from 'react'\n\nimport { connect } from 'react-redux'\nimport {\n  deleteStudent,\n  getStudentById,\n  updateStudent,\n  getCampusById,\n  getAllCampuses,\n} from '../redux/reducers'\nimport { Link, Redirect } from 'react-router-dom'\nimport HalfHeaderBG from './HalfHeaderBG'\n\nimport validateEmail from '../helper/validateEmail'\n\nclass SingleStudent extends Component {\n  state = {\n    redirect: false,\n    editing: false,\n    studentInfo: {\n      id: this.props.match.params.id,\n      first: this.props.student.first,\n      last: this.props.student.last,\n      email: this.props.student.email,\n      image: this.props.student.image,\n      gpa: this.props.student.gpa,\n      CampusId: null,\n    },\n  }\n\n  componentDidMount = async () => {\n    await this.props.getStudentById(this.props.match.params.id)\n    await this.props.getAllCampuses()\n    setTimeout(() => {\n      this.props.getCampusById(this.props.student.CampusId)\n    }, 300)\n  }\n\n  handleSubmit = async () => {\n    console.log('student to be deleted with id:', this.props.match.params.id)\n    await this.props.deleteStudent(this.props.student.id)\n\n    setTimeout(() => {\n      this.setState({\n        redirect: true,\n      })\n    }, 400)\n  }\n\n  handleSelectChange = (e) => {\n    this.setState({\n      studentInfo: {\n        ...this.state.studentInfo,\n        CampusId: e.target.value,\n      },\n    })\n  }\n\n  handleEditChange = (e) => {\n    this.setState({\n      studentInfo: {\n        ...this.state.studentInfo,\n        [e.target.name]: e.target.value,\n      },\n    })\n  }\n\n  handleEditSubmit = (e) => {\n    e.preventDefault()\n\n    if (!validateEmail(this.state.studentInfo.email)) {\n      alert('That is not a valid email.')\n      return\n    }\n\n    if (!this.state.studentInfo.CampusId) {\n      this.setState({\n        studentInfo: {\n          ...this.state.studentInfo,\n          CampusId: null,\n        },\n      })\n    } else {\n      setTimeout(() => {\n        this.props.getCampusById(this.state.studentInfo.CampusId)\n      }, 100)\n    }\n\n    setTimeout(() => {\n      console.log('DATA SENDING AS UPDATE INFO:', this.state.studentInfo)\n      this.props.updateStudent(this.state.studentInfo)\n    }, 200)\n\n    // need to re-get student to rerender component to show updated info\n    setTimeout(() => {\n      this.props.getStudentById(this.props.match.params.id)\n    }, 400)\n\n    setTimeout(() => {\n      this.setState({\n        editing: false,\n      })\n    }, 600)\n  }\n\n  render() {\n    console.log('this.props.campuses:', this.props.campuses)\n    if (this.state.redirect === true) {\n      return <Redirect to='/allStudents' />\n    }\n    console.log('url param id:', this.props.match.params.id)\n\n    if (!this.state.editing) {\n      return (\n        <div>\n          <HalfHeaderBG\n            imgdiv='half-bg-study'\n            title={this.props.student.first + ' ' + this.props.student.last}\n          />\n          <div>\n            <button onClick={() => this.handleSubmit()}>Delete student</button>\n          </div>\n          {this.props.student !== undefined ? (\n            <div>\n              <img src={this.props.student.image} className='studentImages' />\n              <p>\n                Name: {this.props.student.first + ' ' + this.props.student.last}\n              </p>\n              <p>Email: {this.props.student.email}</p>\n              <p>GPA: {this.props.student.gpa}</p>\n              <div>\n                {this.props.student.CampusId === null ? (\n                  <div>\n                    <p>This student is not enrolled in a campus.</p>\n                  </div>\n                ) : (\n                  <Link to={`/singleCampus/${this.props.student.CampusId}`}>\n                    Campus: {this.props.campus.campusname}\n                  </Link>\n                )}\n              </div>\n            </div>\n          ) : (\n            <br />\n          )}\n\n          <div>\n            <button\n              onClick={() =>\n                this.setState({\n                  editing: true,\n                  studentInfo: {\n                    ...this.state.studentInfo,\n                    CampusId: null,\n                  },\n                })\n              }\n            >\n              Edit Student\n            </button>\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <HalfHeaderBG imgdiv='half-bg-study' title='Edit Student' />\n          <form className='createForm'>\n            <div>\n              <label>First:</label>\n              <input\n                type='text'\n                name='first'\n                placeholder={this.props.student.first}\n                onChange={(e) => this.handleEditChange(e)}\n              />\n            </div>\n\n            <div>\n              <label>Last:</label>\n              <input\n                type='text'\n                name='last'\n                placeholder={this.props.student.last}\n                onChange={(e) => this.handleEditChange(e)}\n              />\n            </div>\n\n            <div>\n              <label>Email:</label>\n              <input\n                type='email'\n                name='email'\n                placeholder={this.props.student.email}\n                onChange={(e) => this.handleEditChange(e)}\n              />\n            </div>\n\n            <div>\n              <label>Image:</label>\n              <input\n                type='text'\n                name='image'\n                placeholder={this.props.student.image}\n                onChange={(e) => this.handleEditChange(e)}\n              />\n            </div>\n\n            <div>\n              <label>GPA:</label>\n              <input\n                type='number'\n                step='0.01'\n                name='gpa'\n                placeholder={this.props.student.gpa}\n                onChange={(e) => this.handleEditChange(e)}\n              />\n            </div>\n\n            <div>\n              <label>Place in Campus:</label>\n              <select\n                name='campusSelect'\n                onChange={(e) => this.handleSelectChange(e)}\n              >\n                <option value=''>--Select a campus--</option>\n                {this.props.campuses !== undefined ? (\n                  this.props.campuses.map((campus, index) => (\n                    <option key={index} value={campus.id}>\n                      {campus.campusname}\n                    </option>\n                  ))\n                ) : (\n                  <span />\n                )}\n              </select>\n            </div>\n\n            <div>\n              <button\n                className='normal-btn'\n                onClick={() => this.setState({ editing: false })}\n              >\n                Cancel\n              </button>\n              <input\n                className='normal-btn'\n                type='submit'\n                value='Submit'\n                onClick={(e) => this.handleEditSubmit(e)}\n              />\n            </div>\n          </form>\n        </div>\n      )\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    student: state.student,\n    campus: state.campus,\n    campuses: state.campuses,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getStudentById: (searchStudentId) =>\n      dispatch(getStudentById(searchStudentId)),\n    deleteStudent: (deleteStudentId) =>\n      dispatch(deleteStudent(deleteStudentId)),\n    updateStudent: (studentInfo) => dispatch(updateStudent(studentInfo)),\n    getCampusById: (searchCampusId) => dispatch(getCampusById(searchCampusId)),\n    getAllCampuses: () => dispatch(getAllCampuses()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleStudent)\n","/Users/mojaho/Github/frontend-crud-template/src/components/CreateStudent.js",["105"],"import React, { Component } from 'react'\n\nimport { Link, Redirect } from 'react-router-dom'\n\nimport {\n  createStudent,\n  getCampusById,\n  getStudentById,\n  getAllCampuses,\n} from '../redux/reducers'\n\nimport { connect } from 'react-redux'\nimport HalfHeaderBG from './HalfHeaderBG'\n\nimport validateEmail from '../helper/validateEmail'\n\nclass CreateStudent extends Component {\n  state = {\n    redirect: false,\n    studentInfo: {\n      first: '',\n      last: '',\n      email: '',\n      image: '',\n      gpa: '',\n      CampusId: '',\n    },\n  }\n\n  componentDidMount = async () => {\n    await this.props.getAllCampuses()\n  }\n\n  handleSelectChange = (e) => {\n    this.setState({\n      studentInfo: {\n        ...this.state.studentInfo,\n        CampusId: e.target.value,\n      },\n    })\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      studentInfo: {\n        ...this.state.studentInfo,\n        [e.target.name]: e.target.value,\n      },\n    })\n  }\n\n  handleSubmit = (e) => {\n    console.log('CAMPUS ID IN SUBMIT FUNCT:', this.state.CampusId)\n    e.preventDefault()\n\n    if (!validateEmail(this.state.studentInfo.email)) {\n      alert('That is not a valid email.')\n      return\n    }\n\n    const { first, last, email, image, gpa, CampusId } = this.state.studentInfo\n    if (!first || !last || !email || !image || !gpa) {\n      console.warn(\n        'Please enter a value for all required (*) fields: studentname, email, image, gpa'\n      )\n      return\n    }\n\n    // remove object property because backend won't accept empty property\n    if (!CampusId) {\n      delete this.state.studentInfo.CampusId\n    }\n\n    setTimeout(() => {\n      this.props.createStudent(this.state.studentInfo)\n    }, 300)\n\n    // sets campus state to created student's campus so that campus redirect works in single student view after creation\n    setTimeout(() => {\n      this.props.getCampusById(this.props.student.CampusId)\n    }, 600)\n\n    setTimeout(() => {\n      this.setState({ redirect: true })\n    }, 800)\n  }\n\n  render() {\n    if (this.state.redirect === true) {\n      return <Redirect to={`/singleStudent/${this.props.student.id}`} />\n    }\n\n    let HEADER = (\n      <HalfHeaderBG imgdiv='half-bg-students' title='Create A Student' />\n    )\n    if (this.props.showHeader === false) HEADER = ''\n\n    return (\n      <div className='container'>\n        {HEADER}\n        <form className='createForm' onSubmit={(e) => this.handleSubmit(e)}>\n          <div>\n            <label>First:</label>\n            <input\n              type='text'\n              name='first'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n          <div>\n            <label>Last:</label>\n            <input\n              type='text'\n              name='last'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n          <div>\n            <label>Email:</label>\n            <input\n              type='email'\n              name='email'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n          <div>\n            <label>Image:</label>\n            <input\n              type='text'\n              name='image'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n          <div>\n            <label>GPA:</label>\n            <input\n              type='number'\n              step='0.01'\n              name='gpa'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n          <div>\n            <label>Campus:</label>\n            <select\n              name='campusSelect'\n              onChange={(e) => this.handleSelectChange(e)}\n            >\n              <option value=''>--Select a campus--</option>\n              {this.props.campuses !== undefined ? (\n                this.props.campuses.map((campus, index) => (\n                  <option key={index} value={campus.id}>\n                    {campus.campusname}\n                  </option>\n                ))\n              ) : (\n                <span />\n              )}\n            </select>\n          </div>\n          <br />\n          <div>\n            <input className='btn create-btn' type='submit' value='Submit' />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    student: state.student,\n    // needed for redirect, set to created student's campus on creation\n    campus: state.campus,\n    campuses: state.campuses,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createStudent: (studentInfo) => dispatch(createStudent(studentInfo)),\n    getStudentById: (searchStudentId) =>\n      dispatch(getStudentById(searchStudentId)),\n    getCampusById: (searchCampusId) => dispatch(getCampusById(searchCampusId)),\n    getAllCampuses: () => dispatch(getAllCampuses()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateStudent)\n","/Users/mojaho/Github/frontend-crud-template/src/redux/reducers/index.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/Campus.js",["106","107"],"import React, { Component } from \"react\"\n\nimport { Link } from \"react-router-dom\"\n\nimport DeleteCampus from \"./DeleteCampus\"\n\nclass Campus extends Component {\n  render() {\n    const { id, campusname, image, address, description, Students } = this.props\n    return (\n      <div className=\"campus\">\n        <Link to={`/singleCampus/${id}`} className=\"campusNames\">\n          {campusname}\n          <p className=\"description\">{description}</p>\n        </Link>\n        <img src={image} className=\"campusImages\" alt=\"Campus Image\" />\n        <div className=\"totalStudents\">Students: {Students.length}</div>\n        {/* Requirements just want campus name and image displayed on all campuses */}\n        {/* <p>Address: {address}</p> */}\n        {/* <p>Description: {description}</p> */}\n        <DeleteCampus CampusId={id} />\n      </div>\n    )\n  }\n}\n\nexport default Campus\n","/Users/mojaho/Github/frontend-crud-template/src/components/Student.js",["108","109","110"],"import React, { Component } from 'react'\n\nimport { Link } from 'react-router-dom'\n\nimport DeleteStudent from './DeleteStudent'\n\nclass Student extends Component {\n  render() {\n    const { id, first, last, email, image, gpa, CampusId } = this.props\n    console.log(id, ':', first, last)\n    return (\n      <div className='center-text'>\n        <div className='imgwrapper'>\n          <img alt='Student Image' src={image} className='studentImages' />\n        </div>\n        <Link className='student-link' to={`/singleStudent/${id}`}>\n          {first} {last}\n        </Link>\n        {/* Requirements just want student names displayed on all students */}\n        {/* <p>Email: {email}</p> */}\n        {/* <p>Image: {image}</p> */}\n        {/* <p>GPA: {gpa}</p> */}\n        {/* <p>CampusId: {CampusId}</p> */}\n        <DeleteStudent id={id} CampusId={CampusId} />\n      </div>\n    )\n  }\n}\n\nexport default Student\n","/Users/mojaho/Github/frontend-crud-template/src/redux/reducers/actionTypes.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/DeleteStudent.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/CreateCampus.js",["111"],"import React, { Component } from 'react'\n\nimport { Link, Redirect } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport { createCampus } from '../redux/reducers'\nimport HalfHeaderBG from './HalfHeaderBG'\n\nclass CreateCampus extends Component {\n  state = {\n    redirect: false,\n    campusInfo: {\n      campusname: '',\n      image: '',\n      address: '',\n      description: '',\n    },\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      campusInfo: {\n        ...this.state.campusInfo,\n        [e.target.name]: e.target.value,\n      },\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n\n    const { campusname, image, address, description } = this.state.campusInfo\n    if (!campusname || !image || !address || !description) {\n      console.warn(\n        'Please enter a value for all required (*) fields: campusname, image, address, description'\n      )\n      return\n    }\n\n    this.props.createCampus(this.state.campusInfo)\n\n    setTimeout(() => {\n      this.setState({ redirect: true })\n    }, 500)\n  }\n\n  render() {\n    if (this.state.redirect === true) {\n      return <Redirect to={`/singleCampus/${this.props.campus.id}`} />\n    }\n\n    let HEADER = (\n      <HalfHeaderBG imgdiv='half-bg-campuses' title='Create A Campus' />\n    )\n    if (this.props.showHeader === false) HEADER = ''\n\n    return (\n      <div className='container'>\n        {HEADER}\n\n        <form className='createForm' onSubmit={(e) => this.handleSubmit(e)}>\n          <div>\n            <label>Name:</label>\n            <input\n              type='text'\n              name='campusname'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n\n          <div>\n            <label>Image:</label>\n            <input\n              type='text'\n              name='image'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n\n          <div>\n            <label>Address:</label>\n            <input\n              type='text'\n              name='address'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n\n          <div>\n            <label>Description:</label>\n            <input\n              type='text'\n              name='description'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n          <br />\n          <div>\n            <input className='btn create-btn' type='submit' value='Submit' />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    campus: state.campus,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createCampus: (campusInfo) => dispatch(createCampus(campusInfo)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateCampus)\n","/Users/mojaho/Github/frontend-crud-template/src/components/SingleCampus.js",["112","113"],"import React, { Component } from 'react'\n\nimport { Link, Redirect } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport { getCampusById, updateCampus, deleteCampus } from '../redux/reducers'\n\nimport Student from './Student'\nimport CreateStudent from './CreateStudent'\nimport HalfHeaderBG from './HalfHeaderBG'\n\nclass SingleCampus extends Component {\n  state = {\n    redirect: false,\n    editing: false,\n    addingStudent: false,\n    campusInfo: {\n      id: this.props.match.params.id, // id from url\n      campusname: this.props.campus.campusname,\n      image: this.props.campus.image,\n      address: this.props.campus.address,\n      description: this.props.campus.description,\n    },\n  }\n\n  componentDidMount = async () => {\n    await this.props.getCampusById(this.props.match.params.id)\n  }\n\n  handleDelete = () => {\n    this.props.deleteCampus(this.props.match.params.id)\n\n    setTimeout(() => {\n      this.setState({\n        redirect: true,\n      })\n    }, 500)\n  }\n\n  handleEditChange = (e) => {\n    this.setState({\n      campusInfo: {\n        ...this.state.campusInfo,\n        [e.target.name]: e.target.value,\n      },\n    })\n  }\n\n  handleEditSubmit = (e) => {\n    e.preventDefault()\n\n    this.props.updateCampus(this.state.campusInfo)\n\n    setTimeout(() => {\n      this.props.getCampusById(this.props.match.params.id)\n    }, 300)\n\n    setTimeout(() => {\n      this.setState({\n        editing: false,\n      })\n    }, 600)\n  }\n\n  render() {\n    console.log('Students of campus:', this.props.campus.Students)\n    if (this.state.redirect === true) {\n      return <Redirect to='/allCampuses' />\n    }\n    if (!this.state.editing) {\n      return (\n        <div>\n          <HalfHeaderBG\n            imgdiv='half-bg-campuses'\n            title={this.props.campus.campusname}\n          />\n          <div className='content'>\n            <div>\n              <button onClick={() => this.handleDelete()}>Delete Campus</button>\n            </div>\n            {this.props.campus !== undefined ? (\n              <div>\n                <img src={this.props.campus.image} className='campusImages' />\n                <p>Name: {this.props.campus.campusname}</p>\n                <p>Address: {this.props.campus.address}</p>\n                <p>Description: {this.props.campus.description}</p>\n                <div>\n                  <button onClick={() => this.setState({ editing: true })}>\n                    Edit Campus\n                  </button>\n                </div>\n                <div>\n                  <button\n                    className='green-btn'\n                    onClick={() =>\n                      this.setState({\n                        addingStudent: !this.state.addingStudent,\n                      })\n                    }\n                  >\n                    Add Student\n                  </button>\n                </div>\n                {this.state.addingStudent === true ? (\n                  <div>\n                    <div>\n                      <CreateStudent showHeader={false} />\n                    </div>\n                    <div>\n                      <button\n                        onClick={() => this.setState({ addingStudent: false })}\n                      >\n                        Cancel Addition\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  <span />\n                )}\n                <div>\n                  <div>\n                    {this.props.campus.Students !== undefined ? (\n                      this.props.campus.Students.length === 0 ? (\n                        <div>\n                          <p>\n                            This campus does not have any students enrolled at\n                            the moment.\n                          </p>\n                        </div>\n                      ) : (\n                        this.props.campus.Students.map((student, index) => (\n                          <div key={index}>\n                            <p>Students:</p>\n                            <Student\n                              id={student.id}\n                              first={student.first}\n                              last={student.last}\n                              email={student.email}\n                              image={student.image}\n                              gpa={student.gpa}\n                              CampusId={student.CampusId}\n                            />\n                          </div>\n                        ))\n                      )\n                    ) : (\n                      <br />\n                    )}\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <br />\n            )}\n\n            {/* <div>\n            <button onClick={() => this.setState({ editing: true })}>\n            Edit\n            </button>\n          </div> */}\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <HalfHeaderBG imgdiv='half-bg-campuses' title='Edit Campus' />\n          <form\n            className='createForm'\n            onSubmit={(e) => this.handleEditSubmit(e)}\n          >\n            <div>\n              <label>Name:</label>\n              <input\n                type='text'\n                name='campusname'\n                placeholder={this.props.campus.campusname}\n                onChange={(e) => this.handleEditChange(e)}\n              />\n            </div>\n\n            <div>\n              <label>Image:</label>\n              <input\n                type='text'\n                name='image'\n                placeholder={this.props.campus.image}\n                onChange={(e) => this.handleEditChange(e)}\n              />\n            </div>\n\n            <div>\n              <label>Address:</label>\n              <input\n                type='text'\n                name='address'\n                placeholder={this.props.campus.address}\n                onChange={(e) => this.handleEditChange(e)}\n              />\n            </div>\n\n            <div>\n              <label>Description:</label>\n              <input\n                type='text'\n                name='description'\n                placeholder={this.props.campus.description}\n                onChange={(e) => this.handleEditChange(e)}\n              />\n            </div>\n\n            <div>\n              <button\n                className='normal-btn'\n                onClick={() => this.setState({ editing: false })}\n              >\n                Cancel\n              </button>\n              <input className='normal-btn' type='submit' value='Submit' />\n            </div>\n          </form>\n        </div>\n      )\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    campus: state.campus,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getCampusById: (searchCampusId) => dispatch(getCampusById(searchCampusId)),\n    updateCampus: (campusInfo) => dispatch(updateCampus(campusInfo)),\n    deleteCampus: (deleteCampusId) => dispatch(deleteCampus(deleteCampusId)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleCampus)\n","/Users/mojaho/Github/frontend-crud-template/src/components/DeleteCampus.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/Navbar.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/HalfHeaderBG.js",["114"],"import React, { Component } from 'react'\n\nexport default class HalfHeaderBG extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <div className={this.props.imgdiv}>\n        <div className='middle-align'>\n          <h1>{this.props.title}</h1>\n        </div>\n      </div>\n    )\n  }\n}\n","/Users/mojaho/Github/frontend-crud-template/src/helper/validateEmail.js",[],"/Users/mojaho/Github/frontend-crud-template/src/helper/backend.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":3,"column":10,"nodeType":"121","messageId":"122","endLine":3,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":3,"column":10,"nodeType":"121","messageId":"122","endLine":3,"endColumn":14},{"ruleId":"123","severity":1,"message":"124","line":78,"column":13,"nodeType":"125","endLine":78,"endColumn":40},{"ruleId":"119","severity":1,"message":"120","line":2,"column":10,"nodeType":"121","messageId":"122","endLine":2,"endColumn":14},{"ruleId":"119","severity":1,"message":"126","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":14},{"ruleId":"127","severity":1,"message":"128","line":125,"column":15,"nodeType":"129","endLine":125,"endColumn":79},{"ruleId":"119","severity":1,"message":"120","line":3,"column":10,"nodeType":"121","messageId":"122","endLine":3,"endColumn":14},{"ruleId":"119","severity":1,"message":"130","line":9,"column":36,"nodeType":"121","messageId":"122","endLine":9,"endColumn":43},{"ruleId":"131","severity":1,"message":"132","line":16,"column":9,"nodeType":"129","endLine":16,"endColumn":72},{"ruleId":"119","severity":1,"message":"133","line":9,"column":30,"nodeType":"121","messageId":"122","endLine":9,"endColumn":35},{"ruleId":"119","severity":1,"message":"134","line":9,"column":44,"nodeType":"121","messageId":"122","endLine":9,"endColumn":47},{"ruleId":"131","severity":1,"message":"132","line":14,"column":11,"nodeType":"129","endLine":14,"endColumn":76},{"ruleId":"119","severity":1,"message":"120","line":3,"column":10,"nodeType":"121","messageId":"122","endLine":3,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":3,"column":10,"nodeType":"121","messageId":"122","endLine":3,"endColumn":14},{"ruleId":"127","severity":1,"message":"128","line":83,"column":17,"nodeType":"129","endLine":83,"endColumn":79},{"ruleId":"135","severity":1,"message":"136","line":4,"column":3,"nodeType":"137","messageId":"138","endLine":6,"endColumn":4},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Navbar' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'address' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'email' is assigned a value but never used.","'gpa' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]