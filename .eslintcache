[{"/Users/mojaho/Github/frontend-crud-template/src/index.js":"1","/Users/mojaho/Github/frontend-crud-template/src/reportWebVitals.js":"2","/Users/mojaho/Github/frontend-crud-template/src/redux/store.js":"3","/Users/mojaho/Github/frontend-crud-template/src/App.js":"4","/Users/mojaho/Github/frontend-crud-template/src/components/AllStudents.js":"5","/Users/mojaho/Github/frontend-crud-template/src/components/AllCampuses.js":"6","/Users/mojaho/Github/frontend-crud-template/src/components/Homepage.js":"7","/Users/mojaho/Github/frontend-crud-template/src/components/SingleStudent.js":"8","/Users/mojaho/Github/frontend-crud-template/src/components/CreateStudent.js":"9","/Users/mojaho/Github/frontend-crud-template/src/redux/reducers/index.js":"10","/Users/mojaho/Github/frontend-crud-template/src/components/Campus.js":"11","/Users/mojaho/Github/frontend-crud-template/src/components/Student.js":"12","/Users/mojaho/Github/frontend-crud-template/src/redux/reducers/actionTypes.js":"13","/Users/mojaho/Github/frontend-crud-template/src/components/DeleteStudent.js":"14","/Users/mojaho/Github/frontend-crud-template/src/components/CreateCampus.js":"15","/Users/mojaho/Github/frontend-crud-template/src/components/SingleCampus.js":"16","/Users/mojaho/Github/frontend-crud-template/src/components/DeleteCampus.js":"17","/Users/mojaho/Github/frontend-crud-template/src/components/Navbar.js":"18","/Users/mojaho/Github/frontend-crud-template/src/components/HalfHeaderBG.js":"19"},{"size":614,"mtime":1611514534978,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1611328992500,"results":"22","hashOfConfig":"21"},{"size":268,"mtime":1611328992500,"results":"23","hashOfConfig":"21"},{"size":1283,"mtime":1611520805604,"results":"24","hashOfConfig":"21"},{"size":2291,"mtime":1611544036792,"results":"25","hashOfConfig":"21"},{"size":3331,"mtime":1611542724733,"results":"26","hashOfConfig":"21"},{"size":640,"mtime":1611542724740,"results":"27","hashOfConfig":"21"},{"size":7438,"mtime":1611542724741,"results":"28","hashOfConfig":"21"},{"size":4715,"mtime":1611542724736,"results":"29","hashOfConfig":"21"},{"size":6704,"mtime":1611520805629,"results":"30","hashOfConfig":"21"},{"size":849,"mtime":1611542724734,"results":"31","hashOfConfig":"21"},{"size":890,"mtime":1611544022098,"results":"32","hashOfConfig":"21"},{"size":495,"mtime":1611458674249,"results":"33","hashOfConfig":"21"},{"size":1165,"mtime":1611542724738,"results":"34","hashOfConfig":"21"},{"size":2769,"mtime":1611542724735,"results":"35","hashOfConfig":"21"},{"size":7110,"mtime":1611543385786,"results":"36","hashOfConfig":"21"},{"size":931,"mtime":1611542892851,"results":"37","hashOfConfig":"21"},{"size":573,"mtime":1611520805608,"results":"38","hashOfConfig":"21"},{"size":326,"mtime":1611542724739,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14c2hcg",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},"/Users/mojaho/Github/frontend-crud-template/src/index.js",[],"/Users/mojaho/Github/frontend-crud-template/src/reportWebVitals.js",[],["85","86"],"/Users/mojaho/Github/frontend-crud-template/src/redux/store.js",[],"/Users/mojaho/Github/frontend-crud-template/src/App.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/AllStudents.js",["87"],"/Users/mojaho/Github/frontend-crud-template/src/components/AllCampuses.js",["88"],"import React, { Component } from 'react'\n\nimport { Link } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport { getAllCampuses } from '../redux/reducers'\n\nimport Campus from './Campus'\nimport CreateCampus from './CreateCampus'\n\nclass AllCampuses extends Component {\n  state = {\n    addingCampus: false,\n  }\n\n  async componentDidMount() {\n    await this.fetchAllCampuses()\n  }\n\n  async fetchAllCampuses() {\n    await this.props.getAllCampuses()\n    setTimeout(() => {\n      console.log(this.props.campuses)\n    }, 200)\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='half-bg-campuses'></div>\n\n        <h1>All Campuses Component</h1>\n\n        <div>\n          <button\n            onClick={() =>\n              this.setState({ addingCampus: !this.state.addingCampus })\n            }\n          >\n            Add Campus\n          </button>\n        </div>\n        {this.state.addingCampus === true ? (\n          <div>\n            <CreateCampus />\n            <div>\n              <button onClick={() => this.setState({ addingCampus: false })}>\n                Cancel Addition\n              </button>\n              <br />\n              <br />\n            </div>\n          </div>\n        ) : (\n          <br />\n        )}\n\n        {this.props.campuses !== undefined ? (\n          this.props.campuses.map((campus, index) => (\n            <Campus\n              key={index}\n              id={campus.id}\n              campusname={campus.campusname}\n              image={campus.image}\n              address={campus.address}\n              description={campus.description}\n            />\n          ))\n        ) : (\n          <span />\n        )}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    campuses: state.campuses,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getAllCampuses: () => dispatch(getAllCampuses()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllCampuses)\n","/Users/mojaho/Github/frontend-crud-template/src/components/Homepage.js",["89","90"],"import React, { Component } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport Navbar from \"./Navbar\"\n\nclass Homepage extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"bg-whole\"></div> {/* <- bkg img on homepage */}\n      </div>\n    )\n  }\n}\n\nexport default Homepage\n","/Users/mojaho/Github/frontend-crud-template/src/components/SingleStudent.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/CreateStudent.js",["91","92"],"import React, { Component } from \"react\"\n\nimport { Link, Redirect } from \"react-router-dom\"\n\nimport {\n  createStudent,\n  getCampusById,\n  getStudentById,\n  getAllCampuses,\n} from \"../redux/reducers\"\n\nimport { connect } from \"react-redux\"\n\nclass CreateStudent extends Component {\n  state = {\n    redirect: false,\n    studentInfo: {\n      first: \"\",\n      last: \"\",\n      email: \"\",\n      image: \"\",\n      gpa: \"\",\n      CampusId: \"\",\n    },\n  }\n\n  componentDidMount = async () => {\n    await this.props.getAllCampuses()\n  }\n\n  handleSelectChange = (e) => {\n    this.setState({\n      studentInfo: {\n        ...this.state.studentInfo,\n        CampusId: e.target.value,\n      },\n    })\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      studentInfo: {\n        ...this.state.studentInfo,\n        [e.target.name]: e.target.value,\n      },\n    })\n  }\n\n  handleSubmit = (e) => {\n    console.log(\"CAMPUS ID IN SUBMIT FUNCT:\", this.state.CampusId)\n    e.preventDefault()\n    const { first, last, email, image, gpa, CampusId } = this.state.studentInfo\n    if (!first || !last || !email || !image || !gpa) {\n      console.warn(\n        \"Please enter a value for all required (*) fields: studentname, email, image, gpa\"\n      )\n      return\n    }\n\n    // remove object property because backend won't accept empty property\n    // if (!CampusId) {\n    //   delete this.state.studentInfo.CampusId\n    // }\n\n    setTimeout(() => {\n      this.props.createStudent(this.state.studentInfo)\n    }, 300)\n\n    // sets campus state to created student's campus so that campus redirect works in single student view after creation\n    setTimeout(() => {\n      this.props.getCampusById(this.props.student.CampusId)\n    }, 600)\n\n    setTimeout(() => {\n      this.setState({ redirect: true })\n    }, 800)\n  }\n\n  render() {\n    if (this.state.redirect === true) {\n      return <Redirect to={`/singleStudent/${this.props.student.id}`} />\n    }\n    return (\n      <div>\n        <form className=\"createForm\" onSubmit={(e) => this.handleSubmit(e)}>\n          <div>\n            <label>First:</label>\n            <input\n              type=\"text\"\n              name=\"first\"\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n\n          <div>\n            <label>Last:</label>\n            <input\n              type=\"text\"\n              name=\"last\"\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n\n          <div>\n            <label>Email:</label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n\n          <div>\n            <label>Image:</label>\n            <input\n              type=\"text\"\n              name=\"image\"\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n\n          <div>\n            <label>GPA:</label>\n            <input\n              type=\"number\"\n              step=\"0.01\"\n              name=\"gpa\"\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n          <div>\n            <label>Campus:</label>\n            <select\n              name=\"campusSelect\"\n              onChange={(e) => this.handleSelectChange(e)}\n            >\n              <option value=\"\">--Select a campus--</option>\n              {this.props.campuses !== undefined ? (\n                this.props.campuses.map((campus, index) => (\n                  <option key={index} value={campus.id}>\n                    {campus.campusname}\n                  </option>\n                ))\n              ) : (\n                <span />\n              )}\n            </select>\n          </div>\n          <br />\n          <div>\n            <input className=\"btn create-btn\" type=\"submit\" value=\"Submit\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    student: state.student,\n    // needed for redirect, set to created student's campus on creation\n    campus: state.campus,\n    campuses: state.campuses,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createStudent: (studentInfo) => dispatch(createStudent(studentInfo)),\n    getStudentById: (searchStudentId) =>\n      dispatch(getStudentById(searchStudentId)),\n    getCampusById: (searchCampusId) => dispatch(getCampusById(searchCampusId)),\n    getAllCampuses: () => dispatch(getAllCampuses()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateStudent)\n","/Users/mojaho/Github/frontend-crud-template/src/redux/reducers/index.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/Campus.js",["93","94"],"import React, { Component } from \"react\"\n\nimport { Link } from \"react-router-dom\"\n\nimport DeleteCampus from \"./DeleteCampus\"\n\nclass Campus extends Component {\n  render() {\n    const { id, campusname, image, address, description } = this.props\n    return (\n      <div>\n        <DeleteCampus CampusId={id} />\n        <Link to={`/singleCampus/${id}`}>Campus Name: {campusname}</Link>\n        <p>Image: {image}</p>\n        {/* Requirements just want campus name and image displayed on all campuses */}\n        {/* <p>Address: {address}</p> */}\n        {/* <p>Description: {description}</p> */}\n      </div>\n    )\n  }\n}\n\nexport default Campus\n","/Users/mojaho/Github/frontend-crud-template/src/components/Student.js",["95","96","97"],"/Users/mojaho/Github/frontend-crud-template/src/redux/reducers/actionTypes.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/DeleteStudent.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/CreateCampus.js",["98"],"import React, { Component } from 'react'\n\nimport { Link, Redirect } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport { createCampus } from '../redux/reducers'\n\nclass CreateCampus extends Component {\n  state = {\n    redirect: false,\n    campusInfo: {\n      campusname: '',\n      image: '',\n      address: '',\n      description: '',\n    },\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      campusInfo: {\n        ...this.state.campusInfo,\n        [e.target.name]: e.target.value,\n      },\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n\n    const { campusname, image, address, description } = this.state.campusInfo\n    if (!campusname || !image || !address || !description) {\n      console.warn(\n        'Please enter a value for all required (*) fields: campusname, image, address, description'\n      )\n      return\n    }\n\n    this.props.createCampus(this.state.campusInfo)\n\n    setTimeout(() => {\n      this.setState({ redirect: true })\n    }, 500)\n  }\n\n  render() {\n    if (this.state.redirect === true) {\n      return <Redirect to={`/singleCampus/${this.props.campus.id}`} />\n    }\n    return (\n      <div>\n        <form className='createForm' onSubmit={(e) => this.handleSubmit(e)}>\n          <div>\n            <label>Name:</label>\n            <input\n              type='text'\n              name='campusname'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n\n          <div>\n            <label>Image:</label>\n            <input\n              type='text'\n              name='image'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n\n          <div>\n            <label>Address:</label>\n            <input\n              type='text'\n              name='address'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n\n          <div>\n            <label>Description:</label>\n            <input\n              type='text'\n              name='description'\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n          <br />\n          <div>\n            <input className='btn create-btn' type='submit' value='Submit' />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    campus: state.campus,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createCampus: (campusInfo) => dispatch(createCampus(campusInfo)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateCampus)\n","/Users/mojaho/Github/frontend-crud-template/src/components/SingleCampus.js",["99","100"],"/Users/mojaho/Github/frontend-crud-template/src/components/DeleteCampus.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/Navbar.js",[],"/Users/mojaho/Github/frontend-crud-template/src/components/HalfHeaderBG.js",["101"],"import React, { Component } from 'react'\n\nexport default class HalfHeaderBG extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <div className={this.props.imgdiv}>\n        <div className='middle-align'>\n          <h1>{this.props.title}</h1>\n        </div>\n      </div>\n    )\n  }\n}\n",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":3,"column":10,"nodeType":"108","messageId":"109","endLine":3,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":3,"column":10,"nodeType":"108","messageId":"109","endLine":3,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":14},{"ruleId":"106","severity":1,"message":"110","line":3,"column":8,"nodeType":"108","messageId":"109","endLine":3,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":3,"column":10,"nodeType":"108","messageId":"109","endLine":3,"endColumn":14},{"ruleId":"106","severity":1,"message":"111","line":53,"column":45,"nodeType":"108","messageId":"109","endLine":53,"endColumn":53},{"ruleId":"106","severity":1,"message":"112","line":9,"column":36,"nodeType":"108","messageId":"109","endLine":9,"endColumn":43},{"ruleId":"106","severity":1,"message":"113","line":9,"column":45,"nodeType":"108","messageId":"109","endLine":9,"endColumn":56},{"ruleId":"106","severity":1,"message":"114","line":9,"column":30,"nodeType":"108","messageId":"109","endLine":9,"endColumn":35},{"ruleId":"106","severity":1,"message":"115","line":9,"column":44,"nodeType":"108","messageId":"109","endLine":9,"endColumn":47},{"ruleId":"116","severity":1,"message":"117","line":14,"column":11,"nodeType":"118","endLine":14,"endColumn":76},{"ruleId":"106","severity":1,"message":"107","line":3,"column":10,"nodeType":"108","messageId":"109","endLine":3,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":3,"column":10,"nodeType":"108","messageId":"109","endLine":3,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":83,"column":17,"nodeType":"118","endLine":83,"endColumn":79},{"ruleId":"121","severity":1,"message":"122","line":4,"column":3,"nodeType":"123","messageId":"124","endLine":6,"endColumn":4},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'CampusId' is assigned a value but never used.","'address' is assigned a value but never used.","'description' is assigned a value but never used.","'email' is assigned a value but never used.","'gpa' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]